class Game {
    field Bucket bucket;
    field List drops;
    field ScoreBoard scoreBoard;
    field int ticks;
    field Random random;

    constructor Game new()
    {
        var Point bucketPosition = Point.new(222, 210);
        var Point scorePosition = Point.new(222, 10);
        let bucket = Bucket.new(bucketPosition);
        let drops = List.new();
        let scoreBoard = ScoreBoard.new(scorePosition); 
        let random = Random.new(200);
        let ticks = 100;

        return this;
    }

    method void tick()
    {
        do Sys.wait(25);
        if (ticks = 100)
        {
            let ticks = 0;
            do drops.append(Drop.new(random.randRange(480)));
        }
        var c = 0;
        while ~(c = drops.Last)
        {
            var Drop drop = Drops.get(c);
            if (drop.getPosition().getY() > 250) {
                do drop.setPosition(random.randRange(480));
                do scoreBoard.decHp();
            }
            else {
                var int dropX, dropY, bucketX, bucketY;
                let dropX = drop.getPosition().getX();
                let dropY = drop.getPosition().getY();
                let bucketX = bucket.getPosition().getX();
                let bucketY = bucket.getPosition().getY();
                if ((dropX > bucketX) & ((dropX + 30) < (bucketX + 60)) & (dropY < bucketY) & ((dropY + 30) > bucketY)) {
                    do drop.setPosition(random.randRange(480));
                    do scoreBoard.incScore();
                }
                else {
                    do drop.update();
                }
            }
        }
        let ticks = ticks + 1;
    }


    method void dispose()
    {
        do bucket.dispose();
        do drops.dispose();
        do scoreBoard.dispose();
        do ticks.dispose();
        do random.dispose();
        do Memory.deAlloc();

        return;
    }
}