class Game {
    field Bucket bucket;
    field List drops;
    field ScoreBoard scoreBoard;
    field int ticks;
    field Random random;

    constructor Game new()
    {
        var Point bucketPosition;
        var Point scorePosition;
        let bucketPosition = Point.new(222, 210);
        let scorePosition = Point.new(222, 10);
        let bucket = Bucket.new(bucketPosition);
        let drops = List.new();
        let scoreBoard = ScoreBoard.new(scorePosition); 
        let random = Random.new(200);
        let ticks = 100;

        return this;
    }

    method void tick()
    {
        var int newX;
        var Drop newDrop;
        var int c;
        var Drop drop;
        var int dropX, dropY, bucketX, bucketY;
        var Point dropPosition;
        var Point bucketPosition;
        do Sys.wait(25);
        if (ticks = 100) {
            let ticks = 0;
            let newX = random.randRange(480);
            let newDrop = Drop.new(newX);
            do drops.append(newDrop);
        }
        let c = 0;
        while (c < drops.getCount()) {
            let drop = drops.get(c);
            let dropPosition = drop.getPosition();
            if (dropPosition.getY() > 250) {
                let newX = random.randRange(480);
                do drop.setPosition(newX);
                do scoreBoard.decHp();
            }
            else {
                let bucketPosition = bucket.getPosition();
                let dropX = dropPosition.getX();
                let dropY = dropPosition.getY();
                let bucketX = bucketPosition.getX();
                let bucketY = bucketPosition.getY();
                if ((dropX > bucketX) & ((dropX + 30) < (bucketX + 60)) & (dropY < bucketY) & ((dropY + 30) > bucketY)) {
                    let newX = random.randRange(480);
                    do drop.setPosition(newX);
                    do scoreBoard.incScore();
                }
                else {
                    do drop.update();
                }
            }
            let c = c + 1;
        }
        let ticks = ticks + 1;
        return;
    }

    method Bucket getBucket() {
        return bucket;
    }

    method List getDrops() {
        return drops;
    }

    method ScoreBoard getScoreBoard() {
        return scoreBoard;
    }

    method void moveBucketLeft() {
        do bucket.moveLeft();
        return;
    }

    method void moveBucketRight() {
        do bucket.moveRight();
        return;
    }

    method void dispose()
    {
        do bucket.dispose();
        do drops.dispose();
        do scoreBoard.dispose();
        do ticks.dispose();
        do random.dispose();
        do Memory.deAlloc();

        return;
    }
}